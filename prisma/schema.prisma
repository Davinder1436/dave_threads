// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  firstName String @map("first_name")
  lastName String @map("last_name")
  profileImageURL String? @map("profile_image_url")
  email String @unique
  password String 
  salt String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  comments  Comment[]
  likes  Like[]
  posts Post[]
  @@map("users")
}
model Post {
  id String @id @default(uuid())
  content String 
  imageURL String?
  VideoURL String?

  creatorId String
  creator User @relation(fields: [creatorId],references: [id],onDelete: Cascade)
  likes Like[] 
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([creatorId])
  @@map("posts")
}

model Comment{
   id               Int        @id @default(autoincrement())
  content          String
  authorId         String
  author           User       @relation(fields: [authorId], references: [id],onDelete: Cascade)
  postId           String
  post             Post       @relation(fields: [postId], references: [id],onDelete: Cascade)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  @@map("comments")
  @@index([authorId])
  @@index([postId])
}

model Like{
  id               Int        @id @default(autoincrement())
  userId           String
  user             User       @relation(fields: [userId], references: [id])
  postId           String
  post             Post       @relation(fields: [postId], references: [id])
  createdAt        DateTime   @default(now())
  @@index([userId])
  @@index([postId])
  @@map("likes")
}

